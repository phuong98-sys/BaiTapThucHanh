( nhớ restore thư viện trước khi sử dụng để có style)
.EntityFramework: Kết nối database
	-Migration: Tạo các bảng, refresh lại Model( cột, kiểu dư liệu) nếu có thay đổi rồi sau đó mới load vào Database
	-Cơ chế Up, Down để đảm bảo khic có sự thay đổi Model và code chung cho toàn dự án, sẽ không cần đẩy database lên git để dùng lại
	-Sau đó sẽ Update- Database và sử dụng
.CORE: Tạo các Model, hàm logic thực hiện cho dự án
.Aplication: Tạo API với dữ liệu kiểu Json, tạo service và Interface, nới chưa các DTO cho các Table( Model-> Database-> DTO)
	- Controller của nó sẽ được(tầng Core...)  gennerate lên swagger để test, sử dụng 
	- Cầu nối Client và tầng Domain qua DTo vs Application Service
	- Gọi các hàm ở tầng core và trả về DTO cho tầng đó
.Web.Mvc: Viết các controller mà .Application không làm được, như file,xml,from... hay xử lí các Request
	 - Thường viết js tương ứng ở view-resource: chứ ko phải wwwroot/js/view/tasks/...js
.Web.Host: chạy app project
.Web.Core: gen api ở tầng .application(!)
.Migrator: chuyển web->exe để hiển thị
- DTO: chuyển từ DB-> DTO để trả về cho ng dùng
	+ Tận dụng những trường cần thiết và không bị lộ các trường ko mong muốn
	+ Không cần thay đổi code ở client để hiển thị cho ng dùng hạn chế coupling

phan 2:s
- Mac dinh map khoa ngoia voi id bang kia
- ko co AssignedName mà van nhan
- ko viet o outputFileName va inputName van chay ok
- ham  set select cho dong dau tien
- Có thể tham khảo ở user sử dụng partialview ở web.mvc
- Sửa lại TaskController và hoàn thành thêm sửa xóa

26/4

- Nhớ sd Task
- CÓ 2 cách 1 dùng Thread: 
	+có thể truyền tên và tham số nhưng code khó hiểu, dùng lambda,
	 và bắt đầu bằng hàm Start("truyen tham so vào đây")
	+ Dùng async và await có thể đợi các tiền tình cùng chạy từ trên xuống dưới và đợi xong lần lượt thứ tự như đồng bộ, 
	có thể trả về dữ liệu và truyền đc tham số cho nó, có thể cho nó chạy cùng 1 lúc sử dụng .WhenAll()
	Ctrinh ko treo, trong lúc chờ vẫn thao tác đi nơi khác đc
	
27/4: hoi
- thuc hanh them, hoi anh hoc gi, xem lại mapper readonly, Crud
28/4:
- Khi Migration sai mà chưa đẩy lên git thì xóa bthg, nếu đã đẩy len rồi thì tạo lại cái mới trên project rồi sửu dụng
- update-database [Tên migration cần trở về]
- remove-migration trên đó
- Up: nhữn thứ sửa đổi
- Down: để có thể restore về trạng thái lúc chưa Up


1. Id và secret cả Google cả ứng dụng đều biết, được cấp lúc đầu
2. Gửi yêu cầu nhận mã truy cập API
	+ 1 mã có thể truy cập nhiều APIs
	+ Trong mỗi mã, có tham số Scope để đặt các giá trị trong mã cho phép
	+ Trong lúc yêu cầu mã truy cập, ta có thể gửi lên nhiều Scope
	+ Có thể request mã bằng cách trực tiếp điều hướng trình duyệt đến google
	+ Một số yêu cầu xác thực, sau khi đăng nhập tk google sẽ được hỏi có  cấp 
	quyền cho ư d đó không, => sự đồng ý của người dùng
		- Nếu đồng ý thì ng  phát triển được gửi mã truy cập đến, hoặc mã ủy quyền
		cùng với các Scopes cho phép, nếu không thì server trả về lỗi
3. Kiểm tra phạm vi được truy cập được cấp bởi ng dùng
- So sánh Scopes yêu cầu và Scopes trả về để truy cập tính năng, chức năng ứng dụng
- Có thể scope trả về sẽ ít hơn yêu cầu mà Ư d cho phép
  + Nhiều Giá trị Scope được ánh xạ vào 1 Scope, trả về 1 chuỗi phạm vi cho tất cả các giá trị
4. Gửi mã truy cập đến API
- Gửi đến API cần truy cập trong tiêu đề của HTtp ủy quyền
- Có thể gửi trên URI nhưng không khuyến khích
- API chỉ gửi các tà nguyên trong Scope đã yêu cầu từ mã
5. Làm mới mã truy cập nếu cần
- Mã truy cập có thể hết hạn 
- Muốn cấp lại phải cấp bằng mã làm mới( cho phép nhận mã truy cập mới)

* LÀM MỚI MÃ


Outlook API
- Sử dụng OAuth2 để xác thực: cần access token
- Gọi Mail API: Sau khi có được access token, nó sẽ gửi request đến địa chỉ https://graph.microsoft.com/v1.0/me/mailfolders/inbox/messages để lấy thông tin inbox
- Tinh chỉnh yêu cầu: có thể sử dụng OData để giới hạn các kết quả, các trường trả về
	+$select: lấy các trường subject, from, receivedDateTime fields
	+$stop: nhiều nhất 25 item
	+$orderBy: sx kết quả ngày nhận gần nhất lên đầu
-Ví dụ lấy lịch:
	- Tạo ứng dụng bằng cmd
		+ Thêm một vài thư viện: để đọc ứng dụng cấu hình, xác thực và lấy mã truy cập, gọi Microsoft Graph
	- Đăng kí app trên cổng thông tin của nó:
		+Nhập tài khoản -> Chọn Azure Active Diẻctory -> App Regisrations ( đăng kí ứng dụng, nhớ ID)
		( Application (client) ID
		d497bc9f-95a2-4806-b8de-58e5e7330d5c
		Directory (tenant) ID
		86797743-5a99-4f12-92bb-03f64ec3af41
		Object ID
		a05ad475-2ade-4ad1-b52c-4b598c4a1960)
	- Thêm xác thực Azure AD
		- Yêu cầu cần có để có được Mã truy cập OAuth để gọi đến Microsoft Graph
		1. Khởi tạo .NET development secret store : trong folder chứa GraphTutorial.csproj chạy lệnh : dotnet user-secrets init
		2. Thay APP_ ID, Tạo Scope cho ư d
			User.Read: đọc thông tin tên và email của người dùng
			MailBox.Read: đọc múi giờ, định dạng ngày, thời gian ưa thích của ng dùng
			Calendars.ReadWrite : Đọc các sự kiện hiện có trên lịch và thêm các sự kiện mới

		- Triển khai đăng nhập: Tạo Nhà cung cấp xác thực có thể dùng với Graph SDK và cũng thường dùng để yêu cầu mã truy cập sử dụng devide code flow( luồng mã thiết bị *)
			+ SỬ dụng MSAL để request và quản lí mã
			+  Sử dụng flow khi tài khoản chưa lưu tài khoản- chưa đăng nhập, nếu đã lưu thì lấy token trong bộ nhớ cache hoặc làm mới nó
			+ Vì triển khai interface IAuthenticationProvider  Graph SDK Có thể sử dụng class này để gọi đến  xác thực Graph
		- Đăng nhập và hiển thị mã truy cập:
		
			
XÁC THỰC
- Sử dụng các giao thức của OAuth 2.0(*) và MSAL để xác thực user và truy cập APIs(*)
- Sd Azure để kích hoạt ứng dụng 
1. Đăng kí ứng dụng với Azure:để được cung cấp dịch vụ xác thực và ủy quyền cho ứng dụng và ng dùng nó
	DemoOutlook
	Application (client) ID
	:
	a8f83bd5-dd71-4f7b-a56b-295a5a1a0334
	Object ID
	:
	970739bc-59c1-4180-a88a-ad22b7047c0b
	Directory (tenant) ID
	:
	86797743-5a99-4f12-92bb-03f64ec3af41
 	+ RedirectURI: Điều hướng đến và gửi mã bảo vệ sau khi xác thực xong( sửa tùy ư d *)
		+ Thêm URIs
		+ Add Credentials cho ứ d: Cho phép ư d tự xác thực nó ko bắt buộc có sự tương tác của user trong thời gian chạy này: 
			+Add Certificate : như 1 credential dùng cho production, đảm bảo bảo mật hơn
			+client Secret: như 1 password của ư d, ít đảm bảo hơn, dùng cho quá trình phát triển
				Value: .Xm4NgH873~rGMoMvCz.21pNsSEp0~.QnD
				SecretID: 3735557b-0eef-47c1-a25f-4282131e06d3 ( chỉ cấp 1 lần)


2. Cấu hình ứng dụng: Thêm các scopes, chọn scopes tương ứng giao thức đc sd(IMAP, POP, SMTP) để có quyền truy cập Web API
	3: Thêm Quyền-> Microsoft Graph -> Chọn quyền được ủy quyền, tìm các phạm vi mà nó được liệt kê, dựa vào nó mà truy cập cũng tương ứng Scopes đó
	  + Thêm quyền truy cập Web API: 
	  + Thêm quyền truy cập Microsoft Graph:(skip) dành cho ư d ko quan tâm sự tương tác  của user
	  + Quyền được ủy quyền đến Microsoft Graph: được hỏi khi muốn truy xuất vào mail - sửa- xóa sau khi đăng nhập
	  + Quyền của ư d đv Microsoft Graph:(skip)
	  + Cấu hình thông tin xác thực của client:
	2: Configure ư d để hiển thị Web API:- Tùy thuộc vào scopes này mà ta sẽ nhận được mã truy cập tương ứng dể truy cập tài nguyên API phù hợp với scopes đó
	- Đăng kí Web API: Để cung cấp Scope truy cập tài nguyên trong web API của bạn thì cần đăng kí API với micosoft
	- Bỏ qua redirect URI và Add Credential ở trên
	- Gửi request lên lấy mã 
	  + Add Scopes: có thể cố định cho các ứng dụng đáng tin để không phải hỏi lại
	1: Thiết lập tenant: Tạo mối quan hệ vs Microsoft, tiên quyết cho các bưowsc  sau này thực hiện
	  + Xác định kiểu môi trường: Azure AD
	  + TenantID: 86797743-5a99-4f12-92bb-03f64ec3af41

3. Lấy 1 mã truy cập: 
 - Sd thư viện MSAL hoặc dùng flow để gọi các  REST API nền tảng định danh cơ bản và lấy mã truy cập
 - OAuth truy cập các giao thức IMAP, POP,... thông qua OAuth2 client credentials grant flow là không đc hỗ trợ,
   ta nên dùng Microsoft Graph APIs nó chấp nhận truy cập mà ko có 1 user, bật quyền chi tiết và để cho phạm vi quản trị viên như là truy cập vào một nhóm thư mail đặc biệt
 - Đảm bảo chỉ định phạm vi đầy đủ, bao gồm URLs tài nguyên Outlook khi ủy quyền ư d của b và yêu cầu mã
	IMAP	https://outlook.office.com/IMAP.AccessAsUser.All
	POP	https://outlook.office.com/POP.AccessAsUser.All
	SMTP AUTH	https://outlook.office.com/SMTP.Send
4. Xác thực yêu cầu kết nối với mã truy cập: có thể sử dụng IMAP và POP email
 - SASL XOAUTH2: Mã hóa username và accesstoken trên quá trình truyền tải -> thành chuỗi

How to authenticaion to login microsoft account read mail inbox of outlook using Microsoft Graph in asp.net mvc c#

24/5

- send mail loi
- Them accesstoken vao DB(tao moi lien he voi User)
+ Lay thanh cong ma
+ Lay doi tuong
+ gui request den ham
- Them Gmail